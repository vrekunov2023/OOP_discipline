import keyword
import random

# ===================================================================
# --- 1. Типи даних ---
print("--- 1. Типи даних ---")
student_name = "Олександр"  # str (Рядок)
student_age = 20           # int (Ціле число)
gpa = 3.85                 # float (Число з плаваючою комою)

# list (Список)
courses = ["Захист України", "Комп'ютерні мережі", "Диференціальні рівняння"]

# dict (Словник)
contact_info = {
    "email": "student@example.com",
    "group": "KN-31"
}

# tuple (Кортеж)
student_id = ("Серія КН", 12345678)

# set (Набір)
skills = {"Python", "Networking", "Git", "Python"} # "Python" буде додано лише раз

# --- Вивід типів ---
print(f"Студент: {student_name}, Вік: {student_age}")
print(f"Предмети: {courses}")
print(f"Контакти: {contact_info}")
print(f"ID: {student_id}")
print(f"Навички (унікальні): {skills}")
print(f"Тип GPA: {type(gpa)}")


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 2. Вбудовані константи та зарезервовані слова ---
print("--- 2. Вбудовані константи та зарезервовані слова ---")

# None - це спеціальна константа, що означає "відсутність значення"
last_grade = None
print(f"Остання отримана оцінка: {last_grade}")

# False - булева константа
is_active = False
print(f"Студент активний: {is_active}")

# Виведемо всі ключові (зарезервовані) слова Python
print("\n--- Зарезервовані слова Python ---")
print(keyword.kwlist)


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 3. Вбудовані функції ---
print("--- 3. Вбудовані функції ---")
grades = [85, 92, 78, 95, 88]

print(f"Список оцінок: {grades}")
print(f"Найвища оцінка: {max(grades)}")
print(f"Найнижча оцінка: {min(grades)}")
print(f"Сума всіх оцінок: {sum(grades)}")
print(f"Середній бал: {sum(grades) / len(grades)}") # Комбінація функцій


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 4. Цикли ---
print("--- 4. Цикли ---")

# 1. Цикл for...in (для ітерації по елементах)
devices = ["Router", "Switch", "Firewall", "PC"]
print("--- Мережеві пристрої ---")
for device in devices:
    print(f"Обробка пристрою: {device}")

# 2. Цикл while (для відліку)
print("\n--- Початок тестування мережі ---")
counter = 5
while counter > 0:
    print(f"Залишилось {counter} сек...")
    counter -= 1 # Зменшуємо лічильник
print("Тест завершено!")


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 5. Розгалуження (if/elif/else) ---
print("--- 5. Розгалуження (if/elif/else) ---")

# Згенеруємо випадкову оцінку
score = random.randint(40, 100)

print(f"Ваш бал: {score}")

if score >= 90:
    print("Оцінка: Відмінно (A)")
elif score >= 75:
    print("Оцінка: Добре (B)")
elif score >= 60:
    print("Оцінка: Задовільно (C)")
else:
    print("Оцінка: Незадовільно (F). Потрібне перескладання.")


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 6. Конструкція try...except...finally ---
print("--- 6. Конструкція try...except...finally ---")
my_list = [10, 20, 30]
index_to_check = 5 # Цього індексу не існує

try:
    print(f"Намагаємось отримати елемент з індексом {index_to_check}...")
    value = my_list[index_to_check]
    print(f"Значення: {value}")
except IndexError as e:
    print(f"ПОМИЛКА: Індекс вийшов за межі списку!")
    print(f"Деталі помилки: {e}")
finally:
    # Цей блок виконається завжди
    print(f"Перевірку списку завершено. Довжина списку: {len(my_list)}")


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 7. Контекст-менеджер (with) ---
print("--- 7. Контекст-менеджер (with) ---")

# Створимо список рядків для запису
data_to_write = [
    "Це перша лінія звіту.\n",
    "Це друга лінія.\n",
    "Кінець звіту.\n"
]

# 'w' - означає 'write' (запис). Файл буде створено або перезаписано.
try:
    with open("my_report.txt", "w", encoding="utf-8") as f:
        print("Відкриваємо файл для запису...")
        f.writelines(data_to_write)
        print("Дані успішно записано (у файл 'my_report.txt').")
    # Файл автоматично закривається тут
except Exception as e:
    print(f"Не вдалося записати файл: {e}")

print("Роботу з файлом завершено.")


# ===================================================================
print("\n" + "="*40 + "\n")
# --- 8. Лямбда-функції (lambdas) ---
print("--- 8. Лямбда-функції (lambdas) ---")

# Наша звичайна функція для піднесення до квадрату
def square_func(x):
    return x * x

# Та сама логіка, але у вигляді лямбди
square_lambda = lambda x: x * x

print(f"Функція: {square_func(5)}")
print(f"Лямбда: {square_lambda(5)}")

print("\n--- Використання лямбди для сортування ---")
students = [
    {"name": "Іван", "age": 20},
    {"name": "Марія", "age": 19},
    {"name": "Петро", "age": 21}
]

print(f"Список до сортування: {students}")

# Сортуємо список 'students', використовуючи 'age' як ключ
sorted_students = sorted(students, key=lambda s: s['age'])

print(f"Список після сортування за віком: {sorted_students}")
# ===================================================================